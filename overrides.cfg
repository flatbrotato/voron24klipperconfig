############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> MMU/ERCF MCUs are called "mmu" 

# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
# [gcode_macro _USER_VARIABLES]
# variable_startprint_actions: "action1", "action2", ...
# gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine

[extruder]
# sensor_pin: toolhead:E_TEMPERATURE
## For PT100/PT1000
sensor_type: MAX31865
sensor_pin: toolhead:PA4
spi_bus: spi1
rtd_nominal_r: 1000
rtd_reference_r: 4300
rtd_num_of_wires: 2
control: pid
max_temp=350
pid_Kp=22.885
pid_Ki=1.931
pid_Kd=67.7

[heater_bed]
sensor_type: Generic 3950
max_power: 0.6
min_temp: 0
max_temp: 120
pwm_cycle_time: 0.0166
control: pid
pid_kp: 38.771
pid_ki: 1.746
pid_kd: 215.177
pullup_resistor: 2200 

[temperature_sensor SB2209_Chamber]
sensor_type: Generic 3950
sensor_pin: toolhead:MCU_NTC

[controller_fan controller_fan]
pin: CONTROLLER_FAN
kick_start_time: 0.5
fan_speed: 0.3
idle_timeout: 60

[temperature_sensor Chamber]
pullup_resistor: 2200 

#[temperature_sensor mmu]
#sensor_type = temperature_mcu
#sensor_mcu = mmu

#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_z1]
dir_pin: Z1_DIR

[stepper_z2]
dir_pin: !Z2_DIR

[stepper_z3]
dir_pin: Z3_DIR

[stepper_z]
dir_pin: !Z_DIR
homing_speed: 8
second_homing_speed: 3

[stepper_x]
step_pin: PB10
dir_pin: !PB11
enable_pin: !PG0
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
position_min: 0
homing_speed: 25   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

[stepper_y]
step_pin: PF15
dir_pin: !PF14
enable_pin: !PE9
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
endstop_pin: PC2
position_min: 0
homing_speed: 25  #Max 100
homing_retract_dist: 5
homing_positive_dir: true
position_endstop: 307
position_max: 307
position_min: 0


#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
# [probe]
# x_offset: -1.85
# y_offset: 29.3
# z_offset: 12.6

[probe]
z_offset = -0.480

[neopixel caselight]
pin: MCU_NEOPIXEL
chain_count: 36
color_order: GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0

[fan_generic bed_fan]
pin: MCU_FAN1

[fan_generic filter]
pin: MCU_FAN3
max_power: 1.0
kick_start_time: 0.250
off_below: 0.30

[stepper_y]
position_min: 0
position_endstop: 307
position_max: 307

[input_shaper]
# Supported shapers: zv, mzv, zvd, ei, 2hump_ei, 3hump_ei
shaper_freq_x: 42.2
shaper_type_x: mzv
shaper_freq_y: 35.6
shaper_type_y: mzv

[quad_gantry_level]
gantry_corners:
    -60,-10
    360,370
points:
    50,25
    50,275
    250,275
    250,25
speed: 350
horizontal_move_z: 12
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

[include mmu/addons/blobifier.cfg]
# [include mmu/addons/mmu_erec_cutter.cfg]

[gcode_macro START_FILTER]
rename_existing: START_FILTER.1
gcode:
    {% set SPEED = params.SPEED|default(1)|float %}

    {% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
    SET_FAN_SPEED FAN={filter_name} SPEED={SPEED}
    SET_FAN_SPEED FAN=bed_fan SPEED={SPEED}


[gcode_macro STOP_FILTER]
rename_existing: STOP_FILTER.1
gcode:
    {% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
    SET_FAN_SPEED FAN={filter_name} SPEED=0
    SET_FAN_SPEED FAN=bed_fan SPEED=0
